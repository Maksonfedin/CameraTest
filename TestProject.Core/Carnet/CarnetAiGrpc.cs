// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carnet_ai.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace CarNetAI
{
	public static partial class CarNetAI
	{
		static readonly string __ServiceName = "CarNetAI";

		static readonly grpc::Marshaller<global::DetectModelRequest> __Marshaller_DetectModelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DetectModelRequest.Parser.ParseFrom);
		static readonly grpc::Marshaller<global::DetectModelResponse> __Marshaller_DetectModelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DetectModelResponse.Parser.ParseFrom);
		static readonly grpc::Marshaller<global::GetInfoRequest> __Marshaller_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GetInfoRequest.Parser.ParseFrom);
		static readonly grpc::Marshaller<global::GetInfoResponse> __Marshaller_GetInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GetInfoResponse.Parser.ParseFrom);

		static readonly grpc::Method<global::DetectModelRequest, global::DetectModelResponse> __Method_DetectModel = new grpc::Method<global::DetectModelRequest, global::DetectModelResponse>(
			grpc::MethodType.Unary,
			__ServiceName,
			"DetectModel",
			__Marshaller_DetectModelRequest,
			__Marshaller_DetectModelResponse);

		static readonly grpc::Method<global::GetInfoRequest, global::GetInfoResponse> __Method_GetInfo = new grpc::Method<global::GetInfoRequest, global::GetInfoResponse>(
			grpc::MethodType.Unary,
			__ServiceName,
			"GetInfo",
			__Marshaller_GetInfoRequest,
			__Marshaller_GetInfoResponse);

		/// <summary>Service descriptor</summary>
		public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
		{
			get { return global::CarnetAiReflection.Descriptor.Services[0]; }
		}

		/// <summary>Base class for server-side implementations of CarNetAI</summary>
		public abstract partial class CarNetAIBase
		{
			public virtual global::System.Threading.Tasks.Task<global::DetectModelResponse> DetectModel(global::DetectModelRequest request, grpc::ServerCallContext context)
			{
				throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
			}

			public virtual global::System.Threading.Tasks.Task<global::GetInfoResponse> GetInfo(global::GetInfoRequest request, grpc::ServerCallContext context)
			{
				throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
			}

		}

		/// <summary>Client for CarNetAI</summary>
		public partial class CarNetAIClient : grpc::ClientBase<CarNetAIClient>
		{
			/// <summary>Creates a new client for CarNetAI</summary>
			/// <param name="channel">The channel to use to make remote calls.</param>
			public CarNetAIClient(grpc::Channel channel) : base(channel)
			{
			}
			/// <summary>Creates a new client for CarNetAI that uses a custom <c>CallInvoker</c>.</summary>
			/// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
			public CarNetAIClient(grpc::CallInvoker callInvoker) : base(callInvoker)
			{
			}
			/// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
			protected CarNetAIClient() : base()
			{
			}
			/// <summary>Protected constructor to allow creation of configured clients.</summary>
			/// <param name="configuration">The client configuration.</param>
			protected CarNetAIClient(ClientBaseConfiguration configuration) : base(configuration)
			{
			}

			public virtual global::DetectModelResponse DetectModel(global::DetectModelRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
			{
				return DetectModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
			}
			public virtual global::DetectModelResponse DetectModel(global::DetectModelRequest request, grpc::CallOptions options)
			{
				return CallInvoker.BlockingUnaryCall(__Method_DetectModel, null, options, request);
			}
			public virtual grpc::AsyncUnaryCall<global::DetectModelResponse> DetectModelAsync(global::DetectModelRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
			{
				return DetectModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
			}
			public virtual grpc::AsyncUnaryCall<global::DetectModelResponse> DetectModelAsync(global::DetectModelRequest request, grpc::CallOptions options)
			{
				return CallInvoker.AsyncUnaryCall(__Method_DetectModel, null, options, request);
			}
			public virtual global::GetInfoResponse GetInfo(global::GetInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
			{
				return GetInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
			}
			public virtual global::GetInfoResponse GetInfo(global::GetInfoRequest request, grpc::CallOptions options)
			{
				return CallInvoker.BlockingUnaryCall(__Method_GetInfo, null, options, request);
			}
			public virtual grpc::AsyncUnaryCall<global::GetInfoResponse> GetInfoAsync(global::GetInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
			{
				return GetInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
			}
			public virtual grpc::AsyncUnaryCall<global::GetInfoResponse> GetInfoAsync(global::GetInfoRequest request, grpc::CallOptions options)
			{
				return CallInvoker.AsyncUnaryCall(__Method_GetInfo, null, options, request);
			}
			/// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
			protected override CarNetAIClient NewInstance(ClientBaseConfiguration configuration)
			{
				return new CarNetAIClient(configuration);
			}
		}

		/// <summary>Creates service definition that can be registered with a server</summary>
		/// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
		public static grpc::ServerServiceDefinition BindService(CarNetAIBase serviceImpl)
		{
			return grpc::ServerServiceDefinition.CreateBuilder()
				.AddMethod(__Method_DetectModel, serviceImpl.DetectModel)
				.AddMethod(__Method_GetInfo, serviceImpl.GetInfo).Build();
		}

	}
}
#endregion
