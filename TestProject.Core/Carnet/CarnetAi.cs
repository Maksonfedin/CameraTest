// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carnet_ai.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from carnet_ai.proto</summary>
public static partial class CarnetAiReflection
{

	#region Descriptor
	/// <summary>File descriptor for carnet_ai.proto</summary>
	public static pbr::FileDescriptor Descriptor
	{
		get { return descriptor; }
	}
	private static pbr::FileDescriptor descriptor;

	static CarnetAiReflection()
	{
		byte[] descriptorData = global::System.Convert.FromBase64String(
			string.Concat(
			  "Cg9jYXJuZXRfYWkucHJvdG8iIwoSRGV0ZWN0TW9kZWxSZXF1ZXN0Eg0KBWlt",
			  "YWdlGAEgASgMIoAHChNEZXRlY3RNb2RlbFJlc3BvbnNlEhIKCmlzX3N1Y2Nl",
			  "c3MYASABKAgSDQoFZXJyb3IYAiABKAkSFQoNZXJyb3JfZGV0YWlscxgIIAEo",
			  "CRI9ChBkZXRlY3RlZF9vYmplY3RzGAMgAygLMiMuRGV0ZWN0TW9kZWxSZXNw",
			  "b25zZS5EZXRlY3RlZE9iamVjdBImCh5zZWxlY3RlZF9kZXRlY3RlZF9vYmpl",
			  "Y3RfaW5kZXgYBCABKAUSPAoPcnViYmlzaF9wcmVkaWN0GAkgAygLMiMuRGV0",
			  "ZWN0TW9kZWxSZXNwb25zZS5SdWJiaXNoUHJlZGljdBI7Cg9kZXRlY3RlZF9t",
			  "b2RlbHMYBSADKAsyIi5EZXRlY3RNb2RlbFJlc3BvbnNlLkRldGVjdGVkTW9k",
			  "ZWwSJQodc2VsZWN0ZWRfZGV0ZWN0ZWRfbW9kZWxfaW5kZXgYBiABKAUSLAoH",
			  "dGltaW5ncxgHIAMoCzIbLkRldGVjdE1vZGVsUmVzcG9uc2UuVGltaW5nEicK",
			  "BG1pc2MYCiABKAsyGS5EZXRlY3RNb2RlbFJlc3BvbnNlLk1pc2MawAEKDkRl",
			  "dGVjdGVkT2JqZWN0EhIKCmNsYXNzX25hbWUYASABKAkSFAoMY2xhc3NfbmV0",
			  "X2lkGAIgASgFEgwKBHByb2IYAyABKAISNgoEYmJveBgEIAEoCzIoLkRldGVj",
			  "dE1vZGVsUmVzcG9uc2UuRGV0ZWN0ZWRPYmplY3QuQkJveBo+CgRCQm94EgwK",
			  "BHRsX3gYASABKAISDAoEdGxfeRgCIAEoAhIMCgRicl94GAMgASgCEgwKBGJy",
			  "X3kYBCABKAIaTAoOUnViYmlzaFByZWRpY3QSDQoFbGFiZWwYASABKAkSDAoE",
			  "cHJvYhgCIAEoAhIdChVkZXRlY3RlZF9vYmplY3RfaW5kZXgYAyABKAUadQoN",
			  "RGV0ZWN0ZWRNb2RlbBISCgptb2RlbF9uYW1lGAEgASgJEhQKDG1vZGVsX25l",
			  "dF9pZBgCIAEoBRITCgttb2RlbF9kYl9pZBgDIAEoBRISCgptb2RlbF9wcm9i",
			  "GAQgASgCEhEKCW1ha2VfbmFtZRgFIAEoCRokCgZUaW1pbmcSDAoEbmFtZRgB",
			  "IAEoCRIMCgR0aW1lGAIgASgBGiEKBE1pc2MSGQoRZXhpZl9yb3RhdGVfYW5n",
			  "bGUYASABKAUiEAoOR2V0SW5mb1JlcXVlc3QigwIKD0dldEluZm9SZXNwb25z",
			  "ZRISCgppc19zdWNjZXNzGAEgASgIEg0KBWVycm9yGAIgASgJEhUKDWVycm9y",
			  "X2RldGFpbHMYAyABKAkSJAoFbWFrZXMYBCADKAsyFS5HZXRJbmZvUmVzcG9u",
			  "c2UuTWFrZRqPAQoETWFrZRIMCgRuYW1lGAEgASgJEisKBm1vZGVscxgCIAMo",
			  "CzIbLkdldEluZm9SZXNwb25zZS5NYWtlLk1vZGVsGkwKBU1vZGVsEgwKBG5h",
			  "bWUYASABKAkSDgoGbmV0X2lkGAIgASgFEg0KBWRiX2lkGAMgASgFEhYKDnRy",
			  "YWluX3BpY3NfY250GAQgASgFMnYKCENhck5ldEFJEjoKC0RldGVjdE1vZGVs",
			  "EhMuRGV0ZWN0TW9kZWxSZXF1ZXN0GhQuRGV0ZWN0TW9kZWxSZXNwb25zZSIA",
			  "Ei4KB0dldEluZm8SDy5HZXRJbmZvUmVxdWVzdBoQLkdldEluZm9SZXNwb25z",
			  "ZSIAYgZwcm90bzM="));
		descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
			new pbr::FileDescriptor[] { },
			new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelRequest), global::DetectModelRequest.Parser, new[]{ "Image" }, null, null, null),
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse), global::DetectModelResponse.Parser, new[]{ "IsSuccess", "Error", "ErrorDetails", "DetectedObjects", "SelectedDetectedObjectIndex", "RubbishPredict", "DetectedModels", "SelectedDetectedModelIndex", "Timings", "Misc" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.DetectedObject), global::DetectModelResponse.Types.DetectedObject.Parser, new[]{ "ClassName", "ClassNetId", "Prob", "Bbox" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.DetectedObject.Types.BBox), global::DetectModelResponse.Types.DetectedObject.Types.BBox.Parser, new[]{ "TlX", "TlY", "BrX", "BrY" }, null, null, null)}),
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.RubbishPredict), global::DetectModelResponse.Types.RubbishPredict.Parser, new[]{ "Label", "Prob", "DetectedObjectIndex" }, null, null, null),
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.DetectedModel), global::DetectModelResponse.Types.DetectedModel.Parser, new[]{ "ModelName", "ModelNetId", "ModelDbId", "ModelProb", "MakeName" }, null, null, null),
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.Timing), global::DetectModelResponse.Types.Timing.Parser, new[]{ "Name", "Time" }, null, null, null),
		  new pbr::GeneratedClrTypeInfo(typeof(global::DetectModelResponse.Types.Misc), global::DetectModelResponse.Types.Misc.Parser, new[]{ "ExifRotateAngle" }, null, null, null)}),
		  new pbr::GeneratedClrTypeInfo(typeof(global::GetInfoRequest), global::GetInfoRequest.Parser, null, null, null, null),
		  new pbr::GeneratedClrTypeInfo(typeof(global::GetInfoResponse), global::GetInfoResponse.Parser, new[]{ "IsSuccess", "Error", "ErrorDetails", "Makes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GetInfoResponse.Types.Make), global::GetInfoResponse.Types.Make.Parser, new[]{ "Name", "Models" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GetInfoResponse.Types.Make.Types.Model), global::GetInfoResponse.Types.Make.Types.Model.Parser, new[]{ "Name", "NetId", "DbId", "TrainPicsCnt" }, null, null, null)})})
			}));
	}
	#endregion

}
#region Messages
public sealed partial class DetectModelRequest : pb::IMessage<DetectModelRequest>
{
	private static readonly pb::MessageParser<DetectModelRequest> _parser = new pb::MessageParser<DetectModelRequest>(() => new DetectModelRequest());
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pb::MessageParser<DetectModelRequest> Parser { get { return _parser; } }

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pbr::MessageDescriptor Descriptor
	{
		get { return global::CarnetAiReflection.Descriptor.MessageTypes[0]; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	pbr::MessageDescriptor pb::IMessage.Descriptor
	{
		get { return Descriptor; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelRequest()
	{
		OnConstruction();
	}

	partial void OnConstruction();

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelRequest(DetectModelRequest other) : this()
	{
		image_ = other.image_;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelRequest Clone()
	{
		return new DetectModelRequest(this);
	}

	/// <summary>Field number for the "image" field.</summary>
	public const int ImageFieldNumber = 1;
	private pb::ByteString image_ = pb::ByteString.Empty;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pb::ByteString Image
	{
		get { return image_; }
		set
		{
			image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override bool Equals(object other)
	{
		return Equals(other as DetectModelRequest);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool Equals(DetectModelRequest other)
	{
		if (ReferenceEquals(other, null))
		{
			return false;
		}
		if (ReferenceEquals(other, this))
		{
			return true;
		}
		if (Image != other.Image) return false;
		return true;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override int GetHashCode()
	{
		int hash = 1;
		if (Image.Length != 0) hash ^= Image.GetHashCode();
		return hash;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override string ToString()
	{
		return pb::JsonFormatter.ToDiagnosticString(this);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void WriteTo(pb::CodedOutputStream output)
	{
		if (Image.Length != 0)
		{
			output.WriteRawTag(10);
			output.WriteBytes(Image);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int CalculateSize()
	{
		int size = 0;
		if (Image.Length != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
		}
		return size;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(DetectModelRequest other)
	{
		if (other == null)
		{
			return;
		}
		if (other.Image.Length != 0)
		{
			Image = other.Image;
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(pb::CodedInputStream input)
	{
		uint tag;
		while ((tag = input.ReadTag()) != 0)
		{
			switch (tag)
			{
				default:
					input.SkipLastField();
					break;
				case 10:
					{
						Image = input.ReadBytes();
						break;
					}
			}
		}
	}

}

public sealed partial class DetectModelResponse : pb::IMessage<DetectModelResponse>
{
	private static readonly pb::MessageParser<DetectModelResponse> _parser = new pb::MessageParser<DetectModelResponse>(() => new DetectModelResponse());
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pb::MessageParser<DetectModelResponse> Parser { get { return _parser; } }

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pbr::MessageDescriptor Descriptor
	{
		get { return global::CarnetAiReflection.Descriptor.MessageTypes[1]; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	pbr::MessageDescriptor pb::IMessage.Descriptor
	{
		get { return Descriptor; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelResponse()
	{
		OnConstruction();
	}

	partial void OnConstruction();

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelResponse(DetectModelResponse other) : this()
	{
		isSuccess_ = other.isSuccess_;
		error_ = other.error_;
		errorDetails_ = other.errorDetails_;
		detectedObjects_ = other.detectedObjects_.Clone();
		selectedDetectedObjectIndex_ = other.selectedDetectedObjectIndex_;
		rubbishPredict_ = other.rubbishPredict_.Clone();
		detectedModels_ = other.detectedModels_.Clone();
		selectedDetectedModelIndex_ = other.selectedDetectedModelIndex_;
		timings_ = other.timings_.Clone();
		Misc = other.misc_ != null ? other.Misc.Clone() : null;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public DetectModelResponse Clone()
	{
		return new DetectModelResponse(this);
	}

	/// <summary>Field number for the "is_success" field.</summary>
	public const int IsSuccessFieldNumber = 1;
	private bool isSuccess_;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool IsSuccess
	{
		get { return isSuccess_; }
		set
		{
			isSuccess_ = value;
		}
	}

	/// <summary>Field number for the "error" field.</summary>
	public const int ErrorFieldNumber = 2;
	private string error_ = "";
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public string Error
	{
		get { return error_; }
		set
		{
			error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
		}
	}

	/// <summary>Field number for the "error_details" field.</summary>
	public const int ErrorDetailsFieldNumber = 8;
	private string errorDetails_ = "";
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public string ErrorDetails
	{
		get { return errorDetails_; }
		set
		{
			errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
		}
	}

	/// <summary>Field number for the "detected_objects" field.</summary>
	public const int DetectedObjectsFieldNumber = 3;
	private static readonly pb::FieldCodec<global::DetectModelResponse.Types.DetectedObject> _repeated_detectedObjects_codec
		= pb::FieldCodec.ForMessage(26, global::DetectModelResponse.Types.DetectedObject.Parser);
	private readonly pbc::RepeatedField<global::DetectModelResponse.Types.DetectedObject> detectedObjects_ = new pbc::RepeatedField<global::DetectModelResponse.Types.DetectedObject>();
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pbc::RepeatedField<global::DetectModelResponse.Types.DetectedObject> DetectedObjects
	{
		get { return detectedObjects_; }
	}

	/// <summary>Field number for the "selected_detected_object_index" field.</summary>
	public const int SelectedDetectedObjectIndexFieldNumber = 4;
	private int selectedDetectedObjectIndex_;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int SelectedDetectedObjectIndex
	{
		get { return selectedDetectedObjectIndex_; }
		set
		{
			selectedDetectedObjectIndex_ = value;
		}
	}

	/// <summary>Field number for the "rubbish_predict" field.</summary>
	public const int RubbishPredictFieldNumber = 9;
	private static readonly pb::FieldCodec<global::DetectModelResponse.Types.RubbishPredict> _repeated_rubbishPredict_codec
		= pb::FieldCodec.ForMessage(74, global::DetectModelResponse.Types.RubbishPredict.Parser);
	private readonly pbc::RepeatedField<global::DetectModelResponse.Types.RubbishPredict> rubbishPredict_ = new pbc::RepeatedField<global::DetectModelResponse.Types.RubbishPredict>();
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pbc::RepeatedField<global::DetectModelResponse.Types.RubbishPredict> RubbishPredict
	{
		get { return rubbishPredict_; }
	}

	/// <summary>Field number for the "detected_models" field.</summary>
	public const int DetectedModelsFieldNumber = 5;
	private static readonly pb::FieldCodec<global::DetectModelResponse.Types.DetectedModel> _repeated_detectedModels_codec
		= pb::FieldCodec.ForMessage(42, global::DetectModelResponse.Types.DetectedModel.Parser);
	private readonly pbc::RepeatedField<global::DetectModelResponse.Types.DetectedModel> detectedModels_ = new pbc::RepeatedField<global::DetectModelResponse.Types.DetectedModel>();
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pbc::RepeatedField<global::DetectModelResponse.Types.DetectedModel> DetectedModels
	{
		get { return detectedModels_; }
	}

	/// <summary>Field number for the "selected_detected_model_index" field.</summary>
	public const int SelectedDetectedModelIndexFieldNumber = 6;
	private int selectedDetectedModelIndex_;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int SelectedDetectedModelIndex
	{
		get { return selectedDetectedModelIndex_; }
		set
		{
			selectedDetectedModelIndex_ = value;
		}
	}

	/// <summary>Field number for the "timings" field.</summary>
	public const int TimingsFieldNumber = 7;
	private static readonly pb::FieldCodec<global::DetectModelResponse.Types.Timing> _repeated_timings_codec
		= pb::FieldCodec.ForMessage(58, global::DetectModelResponse.Types.Timing.Parser);
	private readonly pbc::RepeatedField<global::DetectModelResponse.Types.Timing> timings_ = new pbc::RepeatedField<global::DetectModelResponse.Types.Timing>();
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pbc::RepeatedField<global::DetectModelResponse.Types.Timing> Timings
	{
		get { return timings_; }
	}

	/// <summary>Field number for the "misc" field.</summary>
	public const int MiscFieldNumber = 10;
	private global::DetectModelResponse.Types.Misc misc_;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public global::DetectModelResponse.Types.Misc Misc
	{
		get { return misc_; }
		set
		{
			misc_ = value;
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override bool Equals(object other)
	{
		return Equals(other as DetectModelResponse);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool Equals(DetectModelResponse other)
	{
		if (ReferenceEquals(other, null))
		{
			return false;
		}
		if (ReferenceEquals(other, this))
		{
			return true;
		}
		if (IsSuccess != other.IsSuccess) return false;
		if (Error != other.Error) return false;
		if (ErrorDetails != other.ErrorDetails) return false;
		if (!detectedObjects_.Equals(other.detectedObjects_)) return false;
		if (SelectedDetectedObjectIndex != other.SelectedDetectedObjectIndex) return false;
		if (!rubbishPredict_.Equals(other.rubbishPredict_)) return false;
		if (!detectedModels_.Equals(other.detectedModels_)) return false;
		if (SelectedDetectedModelIndex != other.SelectedDetectedModelIndex) return false;
		if (!timings_.Equals(other.timings_)) return false;
		if (!object.Equals(Misc, other.Misc)) return false;
		return true;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override int GetHashCode()
	{
		int hash = 1;
		if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
		if (Error.Length != 0) hash ^= Error.GetHashCode();
		if (ErrorDetails.Length != 0) hash ^= ErrorDetails.GetHashCode();
		hash ^= detectedObjects_.GetHashCode();
		if (SelectedDetectedObjectIndex != 0) hash ^= SelectedDetectedObjectIndex.GetHashCode();
		hash ^= rubbishPredict_.GetHashCode();
		hash ^= detectedModels_.GetHashCode();
		if (SelectedDetectedModelIndex != 0) hash ^= SelectedDetectedModelIndex.GetHashCode();
		hash ^= timings_.GetHashCode();
		if (misc_ != null) hash ^= Misc.GetHashCode();
		return hash;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override string ToString()
	{
		return pb::JsonFormatter.ToDiagnosticString(this);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void WriteTo(pb::CodedOutputStream output)
	{
		if (IsSuccess != false)
		{
			output.WriteRawTag(8);
			output.WriteBool(IsSuccess);
		}
		if (Error.Length != 0)
		{
			output.WriteRawTag(18);
			output.WriteString(Error);
		}
		detectedObjects_.WriteTo(output, _repeated_detectedObjects_codec);
		if (SelectedDetectedObjectIndex != 0)
		{
			output.WriteRawTag(32);
			output.WriteInt32(SelectedDetectedObjectIndex);
		}
		detectedModels_.WriteTo(output, _repeated_detectedModels_codec);
		if (SelectedDetectedModelIndex != 0)
		{
			output.WriteRawTag(48);
			output.WriteInt32(SelectedDetectedModelIndex);
		}
		timings_.WriteTo(output, _repeated_timings_codec);
		if (ErrorDetails.Length != 0)
		{
			output.WriteRawTag(66);
			output.WriteString(ErrorDetails);
		}
		rubbishPredict_.WriteTo(output, _repeated_rubbishPredict_codec);
		if (misc_ != null)
		{
			output.WriteRawTag(82);
			output.WriteMessage(Misc);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int CalculateSize()
	{
		int size = 0;
		if (IsSuccess != false)
		{
			size += 1 + 1;
		}
		if (Error.Length != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
		}
		if (ErrorDetails.Length != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
		}
		size += detectedObjects_.CalculateSize(_repeated_detectedObjects_codec);
		if (SelectedDetectedObjectIndex != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedDetectedObjectIndex);
		}
		size += rubbishPredict_.CalculateSize(_repeated_rubbishPredict_codec);
		size += detectedModels_.CalculateSize(_repeated_detectedModels_codec);
		if (SelectedDetectedModelIndex != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedDetectedModelIndex);
		}
		size += timings_.CalculateSize(_repeated_timings_codec);
		if (misc_ != null)
		{
			size += 1 + pb::CodedOutputStream.ComputeMessageSize(Misc);
		}
		return size;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(DetectModelResponse other)
	{
		if (other == null)
		{
			return;
		}
		if (other.IsSuccess != false)
		{
			IsSuccess = other.IsSuccess;
		}
		if (other.Error.Length != 0)
		{
			Error = other.Error;
		}
		if (other.ErrorDetails.Length != 0)
		{
			ErrorDetails = other.ErrorDetails;
		}
		detectedObjects_.Add(other.detectedObjects_);
		if (other.SelectedDetectedObjectIndex != 0)
		{
			SelectedDetectedObjectIndex = other.SelectedDetectedObjectIndex;
		}
		rubbishPredict_.Add(other.rubbishPredict_);
		detectedModels_.Add(other.detectedModels_);
		if (other.SelectedDetectedModelIndex != 0)
		{
			SelectedDetectedModelIndex = other.SelectedDetectedModelIndex;
		}
		timings_.Add(other.timings_);
		if (other.misc_ != null)
		{
			if (misc_ == null)
			{
				misc_ = new global::DetectModelResponse.Types.Misc();
			}
			Misc.MergeFrom(other.Misc);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(pb::CodedInputStream input)
	{
		uint tag;
		while ((tag = input.ReadTag()) != 0)
		{
			switch (tag)
			{
				default:
					input.SkipLastField();
					break;
				case 8:
					{
						IsSuccess = input.ReadBool();
						break;
					}
				case 18:
					{
						Error = input.ReadString();
						break;
					}
				case 26:
					{
						detectedObjects_.AddEntriesFrom(input, _repeated_detectedObjects_codec);
						break;
					}
				case 32:
					{
						SelectedDetectedObjectIndex = input.ReadInt32();
						break;
					}
				case 42:
					{
						detectedModels_.AddEntriesFrom(input, _repeated_detectedModels_codec);
						break;
					}
				case 48:
					{
						SelectedDetectedModelIndex = input.ReadInt32();
						break;
					}
				case 58:
					{
						timings_.AddEntriesFrom(input, _repeated_timings_codec);
						break;
					}
				case 66:
					{
						ErrorDetails = input.ReadString();
						break;
					}
				case 74:
					{
						rubbishPredict_.AddEntriesFrom(input, _repeated_rubbishPredict_codec);
						break;
					}
				case 82:
					{
						if (misc_ == null)
						{
							misc_ = new global::DetectModelResponse.Types.Misc();
						}
						input.ReadMessage(misc_);
						break;
					}
			}
		}
	}

	#region Nested types
	/// <summary>Container for nested types declared in the DetectModelResponse message type.</summary>
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static partial class Types
	{
		public sealed partial class DetectedObject : pb::IMessage<DetectedObject>
		{
			private static readonly pb::MessageParser<DetectedObject> _parser = new pb::MessageParser<DetectedObject>(() => new DetectedObject());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<DetectedObject> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::DetectModelResponse.Descriptor.NestedTypes[0]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedObject()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedObject(DetectedObject other) : this()
			{
				className_ = other.className_;
				classNetId_ = other.classNetId_;
				prob_ = other.prob_;
				Bbox = other.bbox_ != null ? other.Bbox.Clone() : null;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedObject Clone()
			{
				return new DetectedObject(this);
			}

			/// <summary>Field number for the "class_name" field.</summary>
			public const int ClassNameFieldNumber = 1;
			private string className_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string ClassName
			{
				get { return className_; }
				set
				{
					className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			/// <summary>Field number for the "class_net_id" field.</summary>
			public const int ClassNetIdFieldNumber = 2;
			private int classNetId_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int ClassNetId
			{
				get { return classNetId_; }
				set
				{
					classNetId_ = value;
				}
			}

			/// <summary>Field number for the "prob" field.</summary>
			public const int ProbFieldNumber = 3;
			private float prob_;
			/// <summary>
			/// Prob within [0;1]
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public float Prob
			{
				get { return prob_; }
				set
				{
					prob_ = value;
				}
			}

			/// <summary>Field number for the "bbox" field.</summary>
			public const int BboxFieldNumber = 4;
			private global::DetectModelResponse.Types.DetectedObject.Types.BBox bbox_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public global::DetectModelResponse.Types.DetectedObject.Types.BBox Bbox
			{
				get { return bbox_; }
				set
				{
					bbox_ = value;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as DetectedObject);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(DetectedObject other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (ClassName != other.ClassName) return false;
				if (ClassNetId != other.ClassNetId) return false;
				if (Prob != other.Prob) return false;
				if (!object.Equals(Bbox, other.Bbox)) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
				if (ClassNetId != 0) hash ^= ClassNetId.GetHashCode();
				if (Prob != 0F) hash ^= Prob.GetHashCode();
				if (bbox_ != null) hash ^= Bbox.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (ClassName.Length != 0)
				{
					output.WriteRawTag(10);
					output.WriteString(ClassName);
				}
				if (ClassNetId != 0)
				{
					output.WriteRawTag(16);
					output.WriteInt32(ClassNetId);
				}
				if (Prob != 0F)
				{
					output.WriteRawTag(29);
					output.WriteFloat(Prob);
				}
				if (bbox_ != null)
				{
					output.WriteRawTag(34);
					output.WriteMessage(Bbox);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (ClassName.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
				}
				if (ClassNetId != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassNetId);
				}
				if (Prob != 0F)
				{
					size += 1 + 4;
				}
				if (bbox_ != null)
				{
					size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
				}
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(DetectedObject other)
			{
				if (other == null)
				{
					return;
				}
				if (other.ClassName.Length != 0)
				{
					ClassName = other.ClassName;
				}
				if (other.ClassNetId != 0)
				{
					ClassNetId = other.ClassNetId;
				}
				if (other.Prob != 0F)
				{
					Prob = other.Prob;
				}
				if (other.bbox_ != null)
				{
					if (bbox_ == null)
					{
						bbox_ = new global::DetectModelResponse.Types.DetectedObject.Types.BBox();
					}
					Bbox.MergeFrom(other.Bbox);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 10:
							{
								ClassName = input.ReadString();
								break;
							}
						case 16:
							{
								ClassNetId = input.ReadInt32();
								break;
							}
						case 29:
							{
								Prob = input.ReadFloat();
								break;
							}
						case 34:
							{
								if (bbox_ == null)
								{
									bbox_ = new global::DetectModelResponse.Types.DetectedObject.Types.BBox();
								}
								input.ReadMessage(bbox_);
								break;
							}
					}
				}
			}

			#region Nested types
			/// <summary>Container for nested types declared in the DetectedObject message type.</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static partial class Types
			{
				public sealed partial class BBox : pb::IMessage<BBox>
				{
					private static readonly pb::MessageParser<BBox> _parser = new pb::MessageParser<BBox>(() => new BBox());
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public static pb::MessageParser<BBox> Parser { get { return _parser; } }

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public static pbr::MessageDescriptor Descriptor
					{
						get { return global::DetectModelResponse.Types.DetectedObject.Descriptor.NestedTypes[0]; }
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					pbr::MessageDescriptor pb::IMessage.Descriptor
					{
						get { return Descriptor; }
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public BBox()
					{
						OnConstruction();
					}

					partial void OnConstruction();

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public BBox(BBox other) : this()
					{
						tlX_ = other.tlX_;
						tlY_ = other.tlY_;
						brX_ = other.brX_;
						brY_ = other.brY_;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public BBox Clone()
					{
						return new BBox(this);
					}

					/// <summary>Field number for the "tl_x" field.</summary>
					public const int TlXFieldNumber = 1;
					private float tlX_;
					/// <summary>
					/// Coordinates within [0;1]
					/// </summary>
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public float TlX
					{
						get { return tlX_; }
						set
						{
							tlX_ = value;
						}
					}

					/// <summary>Field number for the "tl_y" field.</summary>
					public const int TlYFieldNumber = 2;
					private float tlY_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public float TlY
					{
						get { return tlY_; }
						set
						{
							tlY_ = value;
						}
					}

					/// <summary>Field number for the "br_x" field.</summary>
					public const int BrXFieldNumber = 3;
					private float brX_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public float BrX
					{
						get { return brX_; }
						set
						{
							brX_ = value;
						}
					}

					/// <summary>Field number for the "br_y" field.</summary>
					public const int BrYFieldNumber = 4;
					private float brY_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public float BrY
					{
						get { return brY_; }
						set
						{
							brY_ = value;
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override bool Equals(object other)
					{
						return Equals(other as BBox);
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public bool Equals(BBox other)
					{
						if (ReferenceEquals(other, null))
						{
							return false;
						}
						if (ReferenceEquals(other, this))
						{
							return true;
						}
						if (TlX != other.TlX) return false;
						if (TlY != other.TlY) return false;
						if (BrX != other.BrX) return false;
						if (BrY != other.BrY) return false;
						return true;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override int GetHashCode()
					{
						int hash = 1;
						if (TlX != 0F) hash ^= TlX.GetHashCode();
						if (TlY != 0F) hash ^= TlY.GetHashCode();
						if (BrX != 0F) hash ^= BrX.GetHashCode();
						if (BrY != 0F) hash ^= BrY.GetHashCode();
						return hash;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override string ToString()
					{
						return pb::JsonFormatter.ToDiagnosticString(this);
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void WriteTo(pb::CodedOutputStream output)
					{
						if (TlX != 0F)
						{
							output.WriteRawTag(13);
							output.WriteFloat(TlX);
						}
						if (TlY != 0F)
						{
							output.WriteRawTag(21);
							output.WriteFloat(TlY);
						}
						if (BrX != 0F)
						{
							output.WriteRawTag(29);
							output.WriteFloat(BrX);
						}
						if (BrY != 0F)
						{
							output.WriteRawTag(37);
							output.WriteFloat(BrY);
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public int CalculateSize()
					{
						int size = 0;
						if (TlX != 0F)
						{
							size += 1 + 4;
						}
						if (TlY != 0F)
						{
							size += 1 + 4;
						}
						if (BrX != 0F)
						{
							size += 1 + 4;
						}
						if (BrY != 0F)
						{
							size += 1 + 4;
						}
						return size;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void MergeFrom(BBox other)
					{
						if (other == null)
						{
							return;
						}
						if (other.TlX != 0F)
						{
							TlX = other.TlX;
						}
						if (other.TlY != 0F)
						{
							TlY = other.TlY;
						}
						if (other.BrX != 0F)
						{
							BrX = other.BrX;
						}
						if (other.BrY != 0F)
						{
							BrY = other.BrY;
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void MergeFrom(pb::CodedInputStream input)
					{
						uint tag;
						while ((tag = input.ReadTag()) != 0)
						{
							switch (tag)
							{
								default:
									input.SkipLastField();
									break;
								case 13:
									{
										TlX = input.ReadFloat();
										break;
									}
								case 21:
									{
										TlY = input.ReadFloat();
										break;
									}
								case 29:
									{
										BrX = input.ReadFloat();
										break;
									}
								case 37:
									{
										BrY = input.ReadFloat();
										break;
									}
							}
						}
					}

				}

			}
			#endregion

		}

		public sealed partial class RubbishPredict : pb::IMessage<RubbishPredict>
		{
			private static readonly pb::MessageParser<RubbishPredict> _parser = new pb::MessageParser<RubbishPredict>(() => new RubbishPredict());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<RubbishPredict> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::DetectModelResponse.Descriptor.NestedTypes[1]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public RubbishPredict()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public RubbishPredict(RubbishPredict other) : this()
			{
				label_ = other.label_;
				prob_ = other.prob_;
				detectedObjectIndex_ = other.detectedObjectIndex_;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public RubbishPredict Clone()
			{
				return new RubbishPredict(this);
			}

			/// <summary>Field number for the "label" field.</summary>
			public const int LabelFieldNumber = 1;
			private string label_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string Label
			{
				get { return label_; }
				set
				{
					label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			/// <summary>Field number for the "prob" field.</summary>
			public const int ProbFieldNumber = 2;
			private float prob_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public float Prob
			{
				get { return prob_; }
				set
				{
					prob_ = value;
				}
			}

			/// <summary>Field number for the "detected_object_index" field.</summary>
			public const int DetectedObjectIndexFieldNumber = 3;
			private int detectedObjectIndex_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int DetectedObjectIndex
			{
				get { return detectedObjectIndex_; }
				set
				{
					detectedObjectIndex_ = value;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as RubbishPredict);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(RubbishPredict other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (Label != other.Label) return false;
				if (Prob != other.Prob) return false;
				if (DetectedObjectIndex != other.DetectedObjectIndex) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (Label.Length != 0) hash ^= Label.GetHashCode();
				if (Prob != 0F) hash ^= Prob.GetHashCode();
				if (DetectedObjectIndex != 0) hash ^= DetectedObjectIndex.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (Label.Length != 0)
				{
					output.WriteRawTag(10);
					output.WriteString(Label);
				}
				if (Prob != 0F)
				{
					output.WriteRawTag(21);
					output.WriteFloat(Prob);
				}
				if (DetectedObjectIndex != 0)
				{
					output.WriteRawTag(24);
					output.WriteInt32(DetectedObjectIndex);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (Label.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
				}
				if (Prob != 0F)
				{
					size += 1 + 4;
				}
				if (DetectedObjectIndex != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeInt32Size(DetectedObjectIndex);
				}
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(RubbishPredict other)
			{
				if (other == null)
				{
					return;
				}
				if (other.Label.Length != 0)
				{
					Label = other.Label;
				}
				if (other.Prob != 0F)
				{
					Prob = other.Prob;
				}
				if (other.DetectedObjectIndex != 0)
				{
					DetectedObjectIndex = other.DetectedObjectIndex;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 10:
							{
								Label = input.ReadString();
								break;
							}
						case 21:
							{
								Prob = input.ReadFloat();
								break;
							}
						case 24:
							{
								DetectedObjectIndex = input.ReadInt32();
								break;
							}
					}
				}
			}

		}

		public sealed partial class DetectedModel : pb::IMessage<DetectedModel>
		{
			private static readonly pb::MessageParser<DetectedModel> _parser = new pb::MessageParser<DetectedModel>(() => new DetectedModel());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<DetectedModel> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::DetectModelResponse.Descriptor.NestedTypes[2]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedModel()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedModel(DetectedModel other) : this()
			{
				modelName_ = other.modelName_;
				modelNetId_ = other.modelNetId_;
				modelDbId_ = other.modelDbId_;
				modelProb_ = other.modelProb_;
				makeName_ = other.makeName_;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public DetectedModel Clone()
			{
				return new DetectedModel(this);
			}

			/// <summary>Field number for the "model_name" field.</summary>
			public const int ModelNameFieldNumber = 1;
			private string modelName_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string ModelName
			{
				get { return modelName_; }
				set
				{
					modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			/// <summary>Field number for the "model_net_id" field.</summary>
			public const int ModelNetIdFieldNumber = 2;
			private int modelNetId_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int ModelNetId
			{
				get { return modelNetId_; }
				set
				{
					modelNetId_ = value;
				}
			}

			/// <summary>Field number for the "model_db_id" field.</summary>
			public const int ModelDbIdFieldNumber = 3;
			private int modelDbId_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int ModelDbId
			{
				get { return modelDbId_; }
				set
				{
					modelDbId_ = value;
				}
			}

			/// <summary>Field number for the "model_prob" field.</summary>
			public const int ModelProbFieldNumber = 4;
			private float modelProb_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public float ModelProb
			{
				get { return modelProb_; }
				set
				{
					modelProb_ = value;
				}
			}

			/// <summary>Field number for the "make_name" field.</summary>
			public const int MakeNameFieldNumber = 5;
			private string makeName_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string MakeName
			{
				get { return makeName_; }
				set
				{
					makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as DetectedModel);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(DetectedModel other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (ModelName != other.ModelName) return false;
				if (ModelNetId != other.ModelNetId) return false;
				if (ModelDbId != other.ModelDbId) return false;
				if (ModelProb != other.ModelProb) return false;
				if (MakeName != other.MakeName) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
				if (ModelNetId != 0) hash ^= ModelNetId.GetHashCode();
				if (ModelDbId != 0) hash ^= ModelDbId.GetHashCode();
				if (ModelProb != 0F) hash ^= ModelProb.GetHashCode();
				if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (ModelName.Length != 0)
				{
					output.WriteRawTag(10);
					output.WriteString(ModelName);
				}
				if (ModelNetId != 0)
				{
					output.WriteRawTag(16);
					output.WriteInt32(ModelNetId);
				}
				if (ModelDbId != 0)
				{
					output.WriteRawTag(24);
					output.WriteInt32(ModelDbId);
				}
				if (ModelProb != 0F)
				{
					output.WriteRawTag(37);
					output.WriteFloat(ModelProb);
				}
				if (MakeName.Length != 0)
				{
					output.WriteRawTag(42);
					output.WriteString(MakeName);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (ModelName.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
				}
				if (ModelNetId != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelNetId);
				}
				if (ModelDbId != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelDbId);
				}
				if (ModelProb != 0F)
				{
					size += 1 + 4;
				}
				if (MakeName.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
				}
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(DetectedModel other)
			{
				if (other == null)
				{
					return;
				}
				if (other.ModelName.Length != 0)
				{
					ModelName = other.ModelName;
				}
				if (other.ModelNetId != 0)
				{
					ModelNetId = other.ModelNetId;
				}
				if (other.ModelDbId != 0)
				{
					ModelDbId = other.ModelDbId;
				}
				if (other.ModelProb != 0F)
				{
					ModelProb = other.ModelProb;
				}
				if (other.MakeName.Length != 0)
				{
					MakeName = other.MakeName;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 10:
							{
								ModelName = input.ReadString();
								break;
							}
						case 16:
							{
								ModelNetId = input.ReadInt32();
								break;
							}
						case 24:
							{
								ModelDbId = input.ReadInt32();
								break;
							}
						case 37:
							{
								ModelProb = input.ReadFloat();
								break;
							}
						case 42:
							{
								MakeName = input.ReadString();
								break;
							}
					}
				}
			}

		}

		public sealed partial class Timing : pb::IMessage<Timing>
		{
			private static readonly pb::MessageParser<Timing> _parser = new pb::MessageParser<Timing>(() => new Timing());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<Timing> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::DetectModelResponse.Descriptor.NestedTypes[3]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Timing()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Timing(Timing other) : this()
			{
				name_ = other.name_;
				time_ = other.time_;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Timing Clone()
			{
				return new Timing(this);
			}

			/// <summary>Field number for the "name" field.</summary>
			public const int NameFieldNumber = 1;
			private string name_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string Name
			{
				get { return name_; }
				set
				{
					name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			/// <summary>Field number for the "time" field.</summary>
			public const int TimeFieldNumber = 2;
			private double time_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public double Time
			{
				get { return time_; }
				set
				{
					time_ = value;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as Timing);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(Timing other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (Name != other.Name) return false;
				if (Time != other.Time) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (Name.Length != 0) hash ^= Name.GetHashCode();
				if (Time != 0D) hash ^= Time.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (Name.Length != 0)
				{
					output.WriteRawTag(10);
					output.WriteString(Name);
				}
				if (Time != 0D)
				{
					output.WriteRawTag(17);
					output.WriteDouble(Time);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (Name.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
				}
				if (Time != 0D)
				{
					size += 1 + 8;
				}
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(Timing other)
			{
				if (other == null)
				{
					return;
				}
				if (other.Name.Length != 0)
				{
					Name = other.Name;
				}
				if (other.Time != 0D)
				{
					Time = other.Time;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 10:
							{
								Name = input.ReadString();
								break;
							}
						case 17:
							{
								Time = input.ReadDouble();
								break;
							}
					}
				}
			}

		}

		public sealed partial class Misc : pb::IMessage<Misc>
		{
			private static readonly pb::MessageParser<Misc> _parser = new pb::MessageParser<Misc>(() => new Misc());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<Misc> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::DetectModelResponse.Descriptor.NestedTypes[4]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Misc()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Misc(Misc other) : this()
			{
				exifRotateAngle_ = other.exifRotateAngle_;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Misc Clone()
			{
				return new Misc(this);
			}

			/// <summary>Field number for the "exif_rotate_angle" field.</summary>
			public const int ExifRotateAngleFieldNumber = 1;
			private int exifRotateAngle_;
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int ExifRotateAngle
			{
				get { return exifRotateAngle_; }
				set
				{
					exifRotateAngle_ = value;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as Misc);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(Misc other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (ExifRotateAngle != other.ExifRotateAngle) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (ExifRotateAngle != 0) hash ^= ExifRotateAngle.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (ExifRotateAngle != 0)
				{
					output.WriteRawTag(8);
					output.WriteInt32(ExifRotateAngle);
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (ExifRotateAngle != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExifRotateAngle);
				}
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(Misc other)
			{
				if (other == null)
				{
					return;
				}
				if (other.ExifRotateAngle != 0)
				{
					ExifRotateAngle = other.ExifRotateAngle;
				}
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 8:
							{
								ExifRotateAngle = input.ReadInt32();
								break;
							}
					}
				}
			}

		}

	}
	#endregion

}

public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest>
{
	private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pbr::MessageDescriptor Descriptor
	{
		get { return global::CarnetAiReflection.Descriptor.MessageTypes[2]; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	pbr::MessageDescriptor pb::IMessage.Descriptor
	{
		get { return Descriptor; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoRequest()
	{
		OnConstruction();
	}

	partial void OnConstruction();

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoRequest(GetInfoRequest other) : this()
	{
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoRequest Clone()
	{
		return new GetInfoRequest(this);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override bool Equals(object other)
	{
		return Equals(other as GetInfoRequest);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool Equals(GetInfoRequest other)
	{
		if (ReferenceEquals(other, null))
		{
			return false;
		}
		if (ReferenceEquals(other, this))
		{
			return true;
		}
		return true;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override int GetHashCode()
	{
		int hash = 1;
		return hash;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override string ToString()
	{
		return pb::JsonFormatter.ToDiagnosticString(this);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void WriteTo(pb::CodedOutputStream output)
	{
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int CalculateSize()
	{
		int size = 0;
		return size;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(GetInfoRequest other)
	{
		if (other == null)
		{
			return;
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(pb::CodedInputStream input)
	{
		uint tag;
		while ((tag = input.ReadTag()) != 0)
		{
			switch (tag)
			{
				default:
					input.SkipLastField();
					break;
			}
		}
	}

}

public sealed partial class GetInfoResponse : pb::IMessage<GetInfoResponse>
{
	private static readonly pb::MessageParser<GetInfoResponse> _parser = new pb::MessageParser<GetInfoResponse>(() => new GetInfoResponse());
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pb::MessageParser<GetInfoResponse> Parser { get { return _parser; } }

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static pbr::MessageDescriptor Descriptor
	{
		get { return global::CarnetAiReflection.Descriptor.MessageTypes[3]; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	pbr::MessageDescriptor pb::IMessage.Descriptor
	{
		get { return Descriptor; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoResponse()
	{
		OnConstruction();
	}

	partial void OnConstruction();

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoResponse(GetInfoResponse other) : this()
	{
		isSuccess_ = other.isSuccess_;
		error_ = other.error_;
		errorDetails_ = other.errorDetails_;
		makes_ = other.makes_.Clone();
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public GetInfoResponse Clone()
	{
		return new GetInfoResponse(this);
	}

	/// <summary>Field number for the "is_success" field.</summary>
	public const int IsSuccessFieldNumber = 1;
	private bool isSuccess_;
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool IsSuccess
	{
		get { return isSuccess_; }
		set
		{
			isSuccess_ = value;
		}
	}

	/// <summary>Field number for the "error" field.</summary>
	public const int ErrorFieldNumber = 2;
	private string error_ = "";
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public string Error
	{
		get { return error_; }
		set
		{
			error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
		}
	}

	/// <summary>Field number for the "error_details" field.</summary>
	public const int ErrorDetailsFieldNumber = 3;
	private string errorDetails_ = "";
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public string ErrorDetails
	{
		get { return errorDetails_; }
		set
		{
			errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
		}
	}

	/// <summary>Field number for the "makes" field.</summary>
	public const int MakesFieldNumber = 4;
	private static readonly pb::FieldCodec<global::GetInfoResponse.Types.Make> _repeated_makes_codec
		= pb::FieldCodec.ForMessage(34, global::GetInfoResponse.Types.Make.Parser);
	private readonly pbc::RepeatedField<global::GetInfoResponse.Types.Make> makes_ = new pbc::RepeatedField<global::GetInfoResponse.Types.Make>();
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public pbc::RepeatedField<global::GetInfoResponse.Types.Make> Makes
	{
		get { return makes_; }
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override bool Equals(object other)
	{
		return Equals(other as GetInfoResponse);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public bool Equals(GetInfoResponse other)
	{
		if (ReferenceEquals(other, null))
		{
			return false;
		}
		if (ReferenceEquals(other, this))
		{
			return true;
		}
		if (IsSuccess != other.IsSuccess) return false;
		if (Error != other.Error) return false;
		if (ErrorDetails != other.ErrorDetails) return false;
		if (!makes_.Equals(other.makes_)) return false;
		return true;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override int GetHashCode()
	{
		int hash = 1;
		if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
		if (Error.Length != 0) hash ^= Error.GetHashCode();
		if (ErrorDetails.Length != 0) hash ^= ErrorDetails.GetHashCode();
		hash ^= makes_.GetHashCode();
		return hash;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public override string ToString()
	{
		return pb::JsonFormatter.ToDiagnosticString(this);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void WriteTo(pb::CodedOutputStream output)
	{
		if (IsSuccess != false)
		{
			output.WriteRawTag(8);
			output.WriteBool(IsSuccess);
		}
		if (Error.Length != 0)
		{
			output.WriteRawTag(18);
			output.WriteString(Error);
		}
		if (ErrorDetails.Length != 0)
		{
			output.WriteRawTag(26);
			output.WriteString(ErrorDetails);
		}
		makes_.WriteTo(output, _repeated_makes_codec);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public int CalculateSize()
	{
		int size = 0;
		if (IsSuccess != false)
		{
			size += 1 + 1;
		}
		if (Error.Length != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
		}
		if (ErrorDetails.Length != 0)
		{
			size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
		}
		size += makes_.CalculateSize(_repeated_makes_codec);
		return size;
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(GetInfoResponse other)
	{
		if (other == null)
		{
			return;
		}
		if (other.IsSuccess != false)
		{
			IsSuccess = other.IsSuccess;
		}
		if (other.Error.Length != 0)
		{
			Error = other.Error;
		}
		if (other.ErrorDetails.Length != 0)
		{
			ErrorDetails = other.ErrorDetails;
		}
		makes_.Add(other.makes_);
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public void MergeFrom(pb::CodedInputStream input)
	{
		uint tag;
		while ((tag = input.ReadTag()) != 0)
		{
			switch (tag)
			{
				default:
					input.SkipLastField();
					break;
				case 8:
					{
						IsSuccess = input.ReadBool();
						break;
					}
				case 18:
					{
						Error = input.ReadString();
						break;
					}
				case 26:
					{
						ErrorDetails = input.ReadString();
						break;
					}
				case 34:
					{
						makes_.AddEntriesFrom(input, _repeated_makes_codec);
						break;
					}
			}
		}
	}

	#region Nested types
	/// <summary>Container for nested types declared in the GetInfoResponse message type.</summary>
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public static partial class Types
	{
		public sealed partial class Make : pb::IMessage<Make>
		{
			private static readonly pb::MessageParser<Make> _parser = new pb::MessageParser<Make>(() => new Make());
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pb::MessageParser<Make> Parser { get { return _parser; } }

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static pbr::MessageDescriptor Descriptor
			{
				get { return global::GetInfoResponse.Descriptor.NestedTypes[0]; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			pbr::MessageDescriptor pb::IMessage.Descriptor
			{
				get { return Descriptor; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Make()
			{
				OnConstruction();
			}

			partial void OnConstruction();

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Make(Make other) : this()
			{
				name_ = other.name_;
				models_ = other.models_.Clone();
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public Make Clone()
			{
				return new Make(this);
			}

			/// <summary>Field number for the "name" field.</summary>
			public const int NameFieldNumber = 1;
			private string name_ = "";
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public string Name
			{
				get { return name_; }
				set
				{
					name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
				}
			}

			/// <summary>Field number for the "models" field.</summary>
			public const int ModelsFieldNumber = 2;
			private static readonly pb::FieldCodec<global::GetInfoResponse.Types.Make.Types.Model> _repeated_models_codec
				= pb::FieldCodec.ForMessage(18, global::GetInfoResponse.Types.Make.Types.Model.Parser);
			private readonly pbc::RepeatedField<global::GetInfoResponse.Types.Make.Types.Model> models_ = new pbc::RepeatedField<global::GetInfoResponse.Types.Make.Types.Model>();
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public pbc::RepeatedField<global::GetInfoResponse.Types.Make.Types.Model> Models
			{
				get { return models_; }
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override bool Equals(object other)
			{
				return Equals(other as Make);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public bool Equals(Make other)
			{
				if (ReferenceEquals(other, null))
				{
					return false;
				}
				if (ReferenceEquals(other, this))
				{
					return true;
				}
				if (Name != other.Name) return false;
				if (!models_.Equals(other.models_)) return false;
				return true;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override int GetHashCode()
			{
				int hash = 1;
				if (Name.Length != 0) hash ^= Name.GetHashCode();
				hash ^= models_.GetHashCode();
				return hash;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public override string ToString()
			{
				return pb::JsonFormatter.ToDiagnosticString(this);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void WriteTo(pb::CodedOutputStream output)
			{
				if (Name.Length != 0)
				{
					output.WriteRawTag(10);
					output.WriteString(Name);
				}
				models_.WriteTo(output, _repeated_models_codec);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public int CalculateSize()
			{
				int size = 0;
				if (Name.Length != 0)
				{
					size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
				}
				size += models_.CalculateSize(_repeated_models_codec);
				return size;
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(Make other)
			{
				if (other == null)
				{
					return;
				}
				if (other.Name.Length != 0)
				{
					Name = other.Name;
				}
				models_.Add(other.models_);
			}

			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public void MergeFrom(pb::CodedInputStream input)
			{
				uint tag;
				while ((tag = input.ReadTag()) != 0)
				{
					switch (tag)
					{
						default:
							input.SkipLastField();
							break;
						case 10:
							{
								Name = input.ReadString();
								break;
							}
						case 18:
							{
								models_.AddEntriesFrom(input, _repeated_models_codec);
								break;
							}
					}
				}
			}

			#region Nested types
			/// <summary>Container for nested types declared in the Make message type.</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
			public static partial class Types
			{
				public sealed partial class Model : pb::IMessage<Model>
				{
					private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public static pb::MessageParser<Model> Parser { get { return _parser; } }

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public static pbr::MessageDescriptor Descriptor
					{
						get { return global::GetInfoResponse.Types.Make.Descriptor.NestedTypes[0]; }
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					pbr::MessageDescriptor pb::IMessage.Descriptor
					{
						get { return Descriptor; }
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public Model()
					{
						OnConstruction();
					}

					partial void OnConstruction();

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public Model(Model other) : this()
					{
						name_ = other.name_;
						netId_ = other.netId_;
						dbId_ = other.dbId_;
						trainPicsCnt_ = other.trainPicsCnt_;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public Model Clone()
					{
						return new Model(this);
					}

					/// <summary>Field number for the "name" field.</summary>
					public const int NameFieldNumber = 1;
					private string name_ = "";
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public string Name
					{
						get { return name_; }
						set
						{
							name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
						}
					}

					/// <summary>Field number for the "net_id" field.</summary>
					public const int NetIdFieldNumber = 2;
					private int netId_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public int NetId
					{
						get { return netId_; }
						set
						{
							netId_ = value;
						}
					}

					/// <summary>Field number for the "db_id" field.</summary>
					public const int DbIdFieldNumber = 3;
					private int dbId_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public int DbId
					{
						get { return dbId_; }
						set
						{
							dbId_ = value;
						}
					}

					/// <summary>Field number for the "train_pics_cnt" field.</summary>
					public const int TrainPicsCntFieldNumber = 4;
					private int trainPicsCnt_;
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public int TrainPicsCnt
					{
						get { return trainPicsCnt_; }
						set
						{
							trainPicsCnt_ = value;
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override bool Equals(object other)
					{
						return Equals(other as Model);
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public bool Equals(Model other)
					{
						if (ReferenceEquals(other, null))
						{
							return false;
						}
						if (ReferenceEquals(other, this))
						{
							return true;
						}
						if (Name != other.Name) return false;
						if (NetId != other.NetId) return false;
						if (DbId != other.DbId) return false;
						if (TrainPicsCnt != other.TrainPicsCnt) return false;
						return true;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override int GetHashCode()
					{
						int hash = 1;
						if (Name.Length != 0) hash ^= Name.GetHashCode();
						if (NetId != 0) hash ^= NetId.GetHashCode();
						if (DbId != 0) hash ^= DbId.GetHashCode();
						if (TrainPicsCnt != 0) hash ^= TrainPicsCnt.GetHashCode();
						return hash;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public override string ToString()
					{
						return pb::JsonFormatter.ToDiagnosticString(this);
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void WriteTo(pb::CodedOutputStream output)
					{
						if (Name.Length != 0)
						{
							output.WriteRawTag(10);
							output.WriteString(Name);
						}
						if (NetId != 0)
						{
							output.WriteRawTag(16);
							output.WriteInt32(NetId);
						}
						if (DbId != 0)
						{
							output.WriteRawTag(24);
							output.WriteInt32(DbId);
						}
						if (TrainPicsCnt != 0)
						{
							output.WriteRawTag(32);
							output.WriteInt32(TrainPicsCnt);
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public int CalculateSize()
					{
						int size = 0;
						if (Name.Length != 0)
						{
							size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
						}
						if (NetId != 0)
						{
							size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
						}
						if (DbId != 0)
						{
							size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbId);
						}
						if (TrainPicsCnt != 0)
						{
							size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainPicsCnt);
						}
						return size;
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void MergeFrom(Model other)
					{
						if (other == null)
						{
							return;
						}
						if (other.Name.Length != 0)
						{
							Name = other.Name;
						}
						if (other.NetId != 0)
						{
							NetId = other.NetId;
						}
						if (other.DbId != 0)
						{
							DbId = other.DbId;
						}
						if (other.TrainPicsCnt != 0)
						{
							TrainPicsCnt = other.TrainPicsCnt;
						}
					}

					[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
					public void MergeFrom(pb::CodedInputStream input)
					{
						uint tag;
						while ((tag = input.ReadTag()) != 0)
						{
							switch (tag)
							{
								default:
									input.SkipLastField();
									break;
								case 10:
									{
										Name = input.ReadString();
										break;
									}
								case 16:
									{
										NetId = input.ReadInt32();
										break;
									}
								case 24:
									{
										DbId = input.ReadInt32();
										break;
									}
								case 32:
									{
										TrainPicsCnt = input.ReadInt32();
										break;
									}
							}
						}
					}

				}

			}
			#endregion

		}

	}
	#endregion

}

#endregion


#endregion Designer generated code
